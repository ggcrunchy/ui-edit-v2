-- Install the pictures dialog.
LoadDialog("Pictures",
	-- Load --
	function(s)
		----------------
		-- Installation
		----------------
		s.Pane = Title("Pictures", .1, true);
		s.Picture = W_Prime("Widget");
		s.Grid = Checkbox();
		s.FlipX = Checkbox();
		s.FlipY = Checkbox();
		s.ThresholdW = SliderHorz(.1, .9, .5, .2, .8);
		s.ThresholdH = SliderHorz(.1, .9, .5, .2, .8);

		----------------------------
		-- Loading: picture display
		----------------------------			
		-- Event --
		s.Picture:SetMethod("e", function(event)
			if event == Widget.WidgetGrab and s.Grid:GetCheck() then
				local x, y, w, h = s.Picture:GetRect("xywh");
				local column, row = math.floor(3 * (cx - x) / w), math.floor(3 * (cy - y) / h);
				s.key = row * 3 + column + 1;
				
				-- Change the checkboxes.
				local bHorizontal, bVertical = s.table[s.key]:GetFlips();
				s.FlipX:SetCheck(bHorizontal);
				s.FlipY:SetCheck(bVertical);
			end
		end);
	
		-- Signal --
		s.Picture:SetMethod("s", s.Picture:ST_Basic());
				
		-- Update --
		s.Picture:SetMethod("u", function(x, y, w, h, vx, vy, vw, vh)
			if not s.Grid:GetCheck() then
				UserW_Current():DrawPicture(s.pkey, x, y, w, h, vx, vy, vw, vh);
				Render.DrawBox(x, y, w, h, 1, 1, 1);
			else
				local grid, col = s.pset[s.pkey]:GetGrid(), SpacedColumn(0, x, y, w / 3, h / 3);
				for r = 1, 3 do
					local row = SpacedRow(0, col());
					for c = 1, 3 do
						local cell, x, y, w, h = (r - 1) * 3 + c, row();
						grid[cell]:Draw(x, y, w, h, true);
						if cell == s.key then
							s.highlight = function()
								Render.DrawBox(x, y, w, h, 1, 0, 0);
							end;
						end
					end
				end
				Render.DrawGrid(x, y, w, h, 1, 1, 1, 2, 2);
				s.highlight();
			end
		end);
			
		--------------------------
		-- Loading: grid checkbox
		--------------------------
		-- Refresh --
		s.Grid:SetMethod("onRefresh", function(bNew)
			if bNew then
				if not s.Grid:GetCheck() then
					-- On normal refreshes, prime the picture. Bind the basic picture and
					-- unload the sliders.
					if s.state == "Entry" or s.state == "Normal" then
						if s.state == "Normal" then
							s.pset[s.pkey]:Prime("Basic");
						end
						s.table, s.key = s.pset, s.pkey;
						Widget.Unload(s.ThresholdW.N);
						Widget.Unload(s.ThresholdH.N);
					end
				else
					-- On normal refreshes, prime the pictures. Bind the first grid cell
					-- and load the sliders.
					if s.state == "Entry" or s.state == "Normal" then
						if s.state == "Normal" then
							s.pset[s.pkey]:Prime("Multi");
						end
						s.table, s.key = s.pset[s.pkey]:GetGrid(), 1;
						s.ThresholdW:Dock(s.Pane, "Body", .7, .55, .25, .1);
						s.ThresholdH:Dock(s.Pane, "Body", .7, .675, .25, .1);
						
						-- Setup the sliders.
						local sw, sh = s.pset[s.pkey]:GetThresholds();
						s.ThresholdW:SetOffset(sw);
						s.ThresholdH:SetOffset(sh);
					end
				end

				-- Clear the checkboxes on normal refreshes.
				if s.state == "Normal" then
					s.FlipX:SetCheck(false);
					s.FlipY:SetCheck(false);
				end
			end
		end);
		
		----------------------------
		-- Loading: flip checkboxes
		----------------------------
		-- Refresh --
		s.FlipX:SetMethod("onRefresh", function(bNew)
			if bNew then
				local _, bVertical = s.table[s.key]:GetFlips();
				s.table[s.key]:Flip(s.FlipX:GetCheck(), bVertical);
			end
		end);
		
		-- Refresh --
		s.FlipY:SetMethod("onRefresh", function(bNew)
			if bNew then
				local bHorizontal = s.table[s.key]:GetFlips();
				s.table[s.key]:Flip(bHorizontal, s.FlipY:GetCheck());
			end
		end);
		
		------------------------------
		-- Loading: threshold sliders
		------------------------------
		-- Refresh --
		s.ThresholdW:SetMethod("onRefresh", function(bNew)
			if bNew then
				s.pset[s.pkey]:SetThreshold("stretchw", s.ThresholdW:GetOffset());
			end
		end);
		
		-- Refresh --
		s.ThresholdH:SetMethod("onRefresh", function(bNew)
			if bNew then
				s.pset[s.pkey]:SetThreshold("stretchh", s.ThresholdH:GetOffset());
			end
		end);
	
		-----------
		-- Docking
		-----------
		PushButton("Setup", function()
			Dialog("PicturesSetup", s.table, s.key);
		end):Dock(s.Pane, "Body", .7, .85, .2, .1);
		local row = SpacedRow(0, .05, .85, .2, .1);
			OK(s):Dock(s.Pane, "Body", row());
			Cancel(s):Dock(s.Pane, "Body", row());				
		local col = SpacedColumn(.05, .7, .1, .075, .1);
		for _, name in { "Grid", "FlipX", "FlipY" } do
			local row = SpacedRow(.05, col());
			s[name]:Dock(s.Pane, "Body", row());
			StaticText(name, false, "T18", 0):Dock(s.Pane, "Body", row(.1));
		end
		s.Picture:Dock(s.Pane, "Body", .05, .25, .6, .5);
		HelpText("Picture", "Picture_Config", true, "T18", .05):Dock(s.Pane, "Body", .05, .1, .6, .1);
	end,
	
	-- Entry
	-- pkey: Picture key
	---------------------
	function(s, pkey)
		s.Pane:Frame(0, 0, .6, .6);
		
		-- Cache a copy of the picture, clearing the old entry.
		s.pset = UserW_Current():GetPictureSet();
		s.copy, s.pkey, s.bSave = s.pset[pkey]:Copy(), pkey, Save;
		
		-- Setup the grid checkbox.
		s.Grid:SetCheck(s.pset[pkey]:Type() == "Multi", true);
		
		-- Setup the flip checkboxes.
		local bHorizontal, bVertical = s.table[s.key]:GetFlips();
		s.FlipX:SetCheck(bHorizontal);
		s.FlipY:SetCheck(bVertical);
	end,
	
	-- Close --
	function(s, bCancel)
		if bCancel then
			s.pset[s.pkey], Save = s.copy, s.bSave;
		end

		-- Unload sliders to allow consistent reloads.
		Widget.Unload(s.ThresholdW.N);
		Widget.Unload(s.ThresholdH.N);
	end,
	
	-- Switch --
	function(s, state)
		s.state = state;
	end
);
---------------
-- Asset table
---------------
local _Asset = {};

---------------------------------
-- CacheAsset
-- Generates and caches an asset
-- name: Name of asset type
-- key: Key used to cache asset
-- arg: Arguments to generator
---------------------------------
function CacheAsset (name, key, ...)
	_Asset[name].cache[key] = NewAsset(name, unpack(arg));
end

--------------------------------------------
-- DefineAssetType
-- Defines a new type of instantiable asset
-- type: Name of asset type
-- methods: Method table
-- new: New routine
-- base: Name of base type
--------------------------------------------
function DefineAssetType (type, methods, new, base)
	_Asset[type] = {
		base = base,
		cache = {},
		methods = methods,
		new = new
	};
	
	-- If the asset has a base type, bind it to this type.
	if base then
		setmetatable(methods, { __index = _Asset[base].methods });	
	end
end

--------------------------------
-- GetAsset
-- Acquires a cached asset
-- name: Name of asset type
-- key: Key used to cache asset
-- Returns: Cached asset
--------------------------------
function GetAsset (name, key)
	return _Asset[name].cache[key];
end

-------------------------------
-- NewAsset
-- Generates a new asset
-- type: Name of asset type
-- arg: Arguments to generator
-- Returns: New asset
-------------------------------
function NewAsset (type, ...)
	-- Method used to invoke constructors, including those of base types.
	local function Construct (type, ap)
		if type.base then
			Construct(_Asset[type.base], ap);
		end
		type.new(ap, unpack(arg));
	end

	-- Build a property set and bind its methods. Construct the asset.
	local ap = {};
	setmetatable(ap, { __index = _Asset[type].methods });
	Construct(_Asset[type], ap);
	return ap;
end

-- Load the asset types.
return Load{
	"Picture.txt",
	"Section.txt",
	"Text.txt",
	"Timer.txt"
};
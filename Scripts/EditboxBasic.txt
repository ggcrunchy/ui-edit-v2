---------------------------------------
-- EditboxBasic
-- Basic editbox setup procedure
-- string: String to assign to editbox
-- textset: Text set to use
-- filter: Text filter
-- blinktime: Cursor blink timeout
-- presstime: Key press timeout
-- Returns: Basic editbox property set
---------------------------------------
function EditboxBasic (string, textset, filter, blinktime, presstime)
	local wp = W_New("EditboxBasic", filter, blinktime, presstime);
		wp:SetPicture("B", GetAsset("Picture", "clear"));
		wp:SetPicture("S", GetAsset("Picture", "blue"));
		wp:SetPicture("C", GetAsset("Picture", "white"));
		wp:SetPicture("F", GetAsset("Picture", "purple"));
		wp:SetText(textset);
		wp:SetString(string);
	return wp;
end

---------------------------------------------------------
-- Table with basic editbox methods; inherits from range
---------------------------------------------------------
W_Inherit("EditboxBasic", {	
	----------------------------------
	-- Deletes the user basic editbox
	-- wp: Widget property set
	----------------------------------
	Delete = function(wp)
	
	end,

	--------------------------------------
	-- Loads the basic editbox dialog box
	-- dp: Dialog property set
	-- widgets: Stock widget table
	--------------------------------------
	Dialog = function(dp, widgets)
		---------------------------------
		-- Loading: basic editbox dialog
		---------------------------------
		dp:SetString("Basic Editbox Features");
		dp.load = { x = .5, y = 0, w = .5, h = .5 };
				
		----------------------------
		-- Loading: picture listbox
		----------------------------
		widgets.pics:Append("Backdrop", "B");
		widgets.pics:Append("Selection", "S");
		widgets.pics:Append("Cursor", "C");
		widgets.pics:Append("Focus", "F");
				
		-----------
		-- Docking
		-----------
		widgets.help:Dock(dp, "Body", .05, .05, .6, .1);
		widgets.pics:Dock(dp, "Body", .05, .2, .6, .3);
		local col = SpacedColumn(.1, .7, .2, .1, .1);
			widgets.up:Dock(dp, "Body", col());
			widgets.down:Dock(dp, "Body", col());
		widgets.set:Dock(dp, "Body", .7, .4, .25, .1);
		local col = SpacedColumn(.05, .05, .6, .25, .1);
			widgets.grid:Dock(dp, "Body", col());
			widgets.tag:Dock(dp, "Body", col());
	end,

	---------------------------------
	-- Generates a new basic editbox
	-- wp: Widget property set
	-- filter: Text filter
	-- blinktime: Cursor blink timeout
	-- presstime: Key press timeout
	-----------------------------------
	New = function(wp, filter, blinktime, presstime)
		wp.filter = filter;
		
		-- Offset from which to begin rendering.
		wp.offset = Range.CreateSpot(wp.N, false, false);
		
		-- Cursor position.
		wp.cursor = Range.CreateSpot(wp.N, true, true);
		
		-- Selected text.
		wp.selection = Range.CreateInterval(wp.N);
		
		-- Blink timer.
		wp.blink = NewAsset("Timer", function()
			wp.bBlink = not wp.bBlink;
		end, blinktime);
		
		-- Key press timer.
		wp.press = NewAsset("Timer", function()
			-- On a copy or cut, apply the action to the selected text. If the text is not
			-- the empty string, put it in the clipboard.
			local start, count = Interval.Get(wp.selection);
			if wp.action == "copy" or wp.action == "cut" then
				if start then
					ClipText = wp:GetSubstr(start, start + count);
					if wp.action == "cut" then
						wp:RemoveText(false);
					end
				end
				
			-- On a paste, paste in any clipboard text.
			elseif wp.action == "paste" then
				wp:AddText(Cliptext or "");
				
			-- On a backspace or delete, remove the selection if it exists. Do so before the
			-- cursor on backspace, and on it otherwise.
			elseif wp.action == "backspace" or wp.action == "delete" then
				wp:RemoveText(wp.action == "backspace");
				
			-- On left, move the cursor back once if no selection exists; otherwise, put the
			-- cursor at the start of it and clear the selection.
			elseif wp.action == "left" then
				Interval.Clear(wp.selection);
				Spot.Set(wp.cursor, start or Spot.Get(wp.cursor) - 1);
				
			-- On right, move the cursor ahead once if no selection exists; otherwise, put
			-- the cursor after it and clear the selection.
			elseif wp.action == "right" then
				Interval.Clear(wp.selection);
				Spot.Set(wp.cursor, start and start + count or Spot.Get(wp.cursor) + 1);
				
			-- Otherwise, add a character to the text.
			elseif type(wp.action) == "string" then
				wp:AddText(wp.action);
			end		
		end);
		
		-- Event --
		wp:SetMethod("e", function(event)
			-- If the editbox is clicked, remove any selection from it. If a spot within
			-- the text is grabbed, place the cursor over the appropriate character;
			-- otherwise, put it at the end of the text. If the editbox is in a focus
			-- chain, give it the focus.
			if event == Widget.RangeGrabItem or event == Widget.WidgetGrab then
				Interval.Clear(wp.selection);
				if event == Widget.RangeGrabItem then
					Spot.Set(wp.cursor, Range.GetGrabbedItem(wp.N));
				else
					Spot.Set(wp.cursor, Range.GetItemCount(wp.N));
				end
				if CurrentSection:IsFocusItem(wp) then
					CurrentSection:SetFocus(wp);
				end
				
			-- If the text is dragged over, select the drag range. If the editbox is in a
			-- focus chain and has lost focus, ignore this event.
			elseif event == Widget.WidgetPostUpkeep then
				local grabbed = Range.GetGrabbedItem(wp.N);
				if grabbed and (not CurrentSection:IsFocusItem(wp) or wp:IsFocus()) then
					local fit = wp:GetFitItem(cx);
					if fit < grabbed then
						grabbed, fit = fit, grabbed;
					end
					Interval.Set(wp.selection, grabbed, fit - grabbed + 1);
				end
			end
		end);		
			
		-- Signal --
		wp:SetMethod("s", function(cx, cy, x, y, w, h)
			-- If the cursor hits the editbox, check whether it has hit an item in the
			-- text. Assuming the character at the editbox offset to be flush with the left
			-- edge, run from the offset and through the characters until either the text
			-- ends or it gets cut off by the right edge. If the cursor is over one of
			-- these characters, add its relative index to the editbox offset to get its
			-- item, and indicate that the item has been hit.
			if PointInBox(cx, cy, x, y, w, h) then
				Widget.Signal(wp.N);
				local ew, textset = x + w, wp:GetText();
				for index, char in wp:Iter(Spot.Get(wp.offset)) do
					local dw = textset:GetWidth(char, 1, 1);
					if cx >= x and cx < x + dw then
						Range.SignalItem(wp.N, index);
						break;
					elseif x + dw > ew then
						break;
					end
					x = x + dw;
				end
			end
		end);
				
		-- Update --		
		wp:SetMethod("u", function(x, y, w, h)
			wp:DrawPicture(wp:IsFocus() and "F" or "B", x, y, w, h);
			
			-- Update the key press timer.
			wp.press:Update();
			
			-- If the string is not empty, proceed to draw it.
			local string, textset = wp:GetString(), wp:GetText();
			local offset, start, count = Spot.Get(wp.offset) or 0, Interval.Get(wp.selection);
			if string ~= "" then
				if start and start + count > offset then
					-- If the selection begins after the offset, find the text width
					-- leading up to it, and move ahead that far. Otherwise, reduce
					-- the selection to account for entries before the offset.
					local sx, begin = x, 0;
					if start > offset then
						begin = start - offset;
						sx = sx + textset:GetWidth(string, 1, begin);
					else
						count = count + start - offset;
					end
					
					-- If the selection begins within the visible region, get the clipped
					-- width of the selected text and draw a box.
					if sx < x + w then
						local sw = textset:GetWidth(string, begin + 1, begin + count);
						if sx + sw > x + w then
							sw = x + w - sx;
						end
						wp:DrawPicture("S", sx, y, sw, h);
					end
				end
				
				-- Draw the visible portion of the string.
				textset:DrawString(string, x, y);
			end
			
			-- Draw the cursor if it is not blinked and there is no selection.
			wp.blink:Update();
			local cursor = Spot.Get(wp.cursor);
			if not wp.bBlink and cursor >= offset then
				local delta = cursor - offset;
				local cx = x + textset:GetWidth(string, 1, delta);
				if cx < x + w and not start then
					if cursor == Range.GetItemCount(wp.N) then
						string, delta = " ", 0;
					end
					local cw = textset:GetWidth(string, delta + 1, delta + 1);
					if cx + cw > x + w then
						cw = x + w - cx;
					end
					wp:DrawPicture("C", cx, y, cw, h);
				end
			end
			
			-- Frame the editbox.
			Render.DrawBox(x, y, w, h, 1, 1, 1);
		end);
				
		-- Focus --
		wp:SetMethod("onFocus", function(bGain)
			if not bGain then
				Interval.Clear(wp.selection);
				wp.action = nil;
			end
		end);
		
		-- Key Trap --
		wp:SetMethod("onKeyTrap", function(action, bPress)
			if bPress then
				wp.action = action;
				wp.press:SetTimeout(presstime, true);
			else
				wp.action = nil;
			end
		end);
	end,

	----------------------------------------------------
	-- Prints the basic editbox data to a stream
	-- wp: Widget property set
	-- stream: Stream to which basic editbox is printed
	-- indent: Indent string
	----------------------------------------------------
	Print = function(wp, stream, indent)
		local indent = indent or "";
		stream:write('W_Load("EditboxBasic", {\n');
		
	--	wp:PrintPictures(stream, indent, "B");
	
		stream:write(indent, "});\n");
	end,
	
	---------------------------------------
	-- Generates a new user basic editbox
	-- Returns: Basic editbox property set
	---------------------------------------
	UserNew = function()
		return UserW_Widget("EditboxBasic", function(wp, where, input) end, 300, 250);
	end,

	----------------------------------
	-- Adds text to the basic editbox
	-- wp: Widget property set
	-- text: Text string to add
	----------------------------------
	AddText = function(wp, text)
		-- If there is a selection, overwrite it.
		local start, count = Interval.Get(wp.selection);
		if start then
			wp:RemoveText(false);
		end
		
		-- Add the text, filtering out unwanted characters, and put the cursor at the end.
		local cursor = Spot.Get(wp.cursor);
		for char in string.gfind(text, ".") do
			if not wp:filter(cursor, char) then
				wp:InsertString(cursor, char);
				cursor = cursor + 1;
			end
		end
	end,
		
	--------------------------------------------
	-- Gets the item that fits a given position
	-- wp: Widget property set
	-- where: Position to fit
	-- Returns: Item that fits position
	--------------------------------------------
	GetFitItem = function(wp, where)
		local x, w = wp:GetRect("xw");

		-- If the cursor is left of the editbox, fit it to the editbox offset.
		local offset = Spot.Get(wp.offset);
		if where < x then
			return offset;
		end
		
		-- As per the hit test, assume the character at the editbox offset to be flush
		-- with the left edge, and run from there through the characters. If the cursor
		-- is over one of those characters, fit it to that spot. If the cursor goes
		-- past the right edge of the editbox, fit it to the last visible spot in the
		-- string.
		local ew, textset = x + w, wp:GetText();
		for index, char in wp:Iter(offset) do
			local dw = textset:GetWidth(char, 1, 1);
			if (where >= x and where < x + dw) or x + dw > ew then
				return index;
			end
			x = x + dw;
		end
		
		-- If the cursor is right of the end of the string, fit to the item count. 
		return Range.GetItemCount(wp.N);
	end,

	---------------------------------
	-- Gets the basic editbox string
	-- wp: Widget property set
	-- Returns: The editbox string
	---------------------------------
	GetString = function(wp)
		return wp:GetSubstr(0, Range.GetItemCount(wp.N));
	end,

	-------------------------------------------------------
	-- Builds an iterator over the basic editbox
	-- wp: Widget property set
	-- start: Start index; if nil, start at 0
	-- count: Range count; if nil, use character count
	-- Returns: Iterator which returns index and character
	-------------------------------------------------------
	Iter = function(wp, start, count)
		local itemcount = Range.GetItemCount(wp.N);
		start, count = start or 0, count or itemcount;
		local final = start + count;
		if final > itemcount then
			final = itemcount;
		end
		return function(_, index)
			if index + 1 < final then
				return index + 1, wp:GetSubstr(index + 1, index + 2);
			end
		end, nil, start - 1;
	end,

	---------------------------------------
	-- Removes text from the basic editbox
	-- wp: Widget property set
	-- bBack: If true, backspace
	---------------------------------------
	RemoveText = function(wp, bBack)
		-- If there is a selection, delete it and put the cursor at the start of where it
		-- was. Otherwise, delete the character at the cursor position, noting that the
		-- cursor is first moved back one spot for a backspace.
		local start, count = Interval.Get(wp.selection);
		if start then
			Range.DeleteItems(wp.N, start, count);
			Spot.Set(wp.cursor, start);
		else
			local cursor = Spot.Get(wp.cursor);
			Range.DeleteItems(wp.N, bBack and cursor - 1 or cursor, 1); 
		end
	end,
	
	-----------------------------------------
	-- Assigns a string to the basic editbox
	-- wp: Widget property set
	-- string: String to assign
	-----------------------------------------
	SetString = function(wp, string)
		Interval.Set(wp.selection, 0, Range.GetItemCount(wp.N));
		wp:AddText(string);
	end
}, "Range");

-------------------------------------------------
-- FilterString
-- Builds a closure to filter string characters
-- maxlen: Maximum string length allowable
-- bLeadingDigits: If true, allow leading digits
-------------------------------------------------
function FilterString (maxlen, bLeadingDigits)
	return function(wp, where, input)
		-- If the string is full, disallow the character.
		if string.len(wp:GetString()) == maxlen then
			return true;
		
		-- Disallow leading numbers if requested.
		elseif input >= "0" and input <= "9" then
			if not bLeadingDigits and where == 0 then
				return true;
			end
		end
	end
end

------------------------------------------------
-- FilterUnsigned
-- Builds a closure to filter unsigned integers
-- max: Maximum number allowable
------------------------------------------------
function FilterUnsigned (max)
	return function(wp, where, input)
		-- Make sure the input is a number.
		if input < "0" or input > "9" then
			return true;
		end
		
		-- Disallow leading zeroes on non-empty strings.
		local text = wp:GetString();
		if string.sub(text, 1, 1) == "0" and where ~= 0 then
			return true;
		elseif input == "0" and text ~= "" and where == 0 then
			return true;
		end
		
		-- Disallow integers greater than the maximum.
		local left, right = string.sub(text, 1, where) or "", string.sub(text, where + 1) or "";
		if tonumber(left .. input .. right) > max then
			return true;
		end 
	end
end
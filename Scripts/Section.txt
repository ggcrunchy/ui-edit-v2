------------------------
-- Section table, stack
------------------------
local _Section, _Stack = {}, {};

-----------------------------------
-- Launch
-- Launches a section
-- name: Section name
-- prologue: Prologue logic
-- epilogue: Epilogue logic
-- arg: Arguments to entry routine
-----------------------------------
local function Launch (name, prologue, epilogue, ...)
	-- Invoke the launch prologue.
	prologue();
	
	-- Wipe out current input.
	UI.ClearInput();
	
	-- Push the section onto the stack.
	table.insert(_Stack, { epilogue = epilogue, section = _Section[name] });
	
	-- Run the entry routine on the section.
	_Section[name]:Switch("Entry");
	_Section[name]:enter(unpack(arg));
	_Section[name]:Switch("Normal");
end

--------------------------
-- Load
-- Loads a section
-- name: Section name
-- load: Load routine
-- enter: Entry routine
-- close: Close routine
-- switch: Switch routine
--------------------------
local function Load (name, load, enter, close, switch)	
	-- Make and load the section.
	_Section[name] = NewAsset("Section", load, switch);
	
	-- Install the entry, close, and switch routines.
	_Section[name].enter, _Section[name].close, _Section[name].switch = enter, close, switch;
end

-----------------------
-- Pop
-- Pop one stack level
-----------------------
local function Pop ()
	-- Unload the section frame entry.
	Widget.Unload(UI.GetFrameHead());
		
	-- Pop the section from the stack. Invoke its epilogue.
	table.remove(_Stack).epilogue();
end

------------------------------
-- Table with section methods
------------------------------
DefineAssetType("Section", {
	-------------------------------------
	-- Builds a section close routine
	-- sp: Section property set
	-- bCancel: If true, cancel on close
	-- Returns: Closure to close section
	-------------------------------------
	Close = function(sp, bCancel)
		return function()
			sp:Switch("Close");
			sp:close(bCancel);
			Pop();
		end
	end,
	
	----------------------------------------------
	-- Builds a conditional section close routine
	-- sp: Section property set
	-- bCancel: If true, cancel on close
	-- condition: Condition on which to close
	-- Returns: Closure to close section
	----------------------------------------------
	CloseIf = function(sp, bCancel, condition)
		local close = sp:Close(bCancel);
		return function()
			if condition() then
				close();
			end
		end
	end,
	
	-------------------------------
	-- Gets the current focus
	-- sp: Section property set
	-- Returns: Focus property set
	-------------------------------
	GetFocus = function(sp)
		return sp.focus[sp.current or 0];
	end,
	
	------------------------------------------------
	-- Checks whether an item is in the focus chain
	-- sp: Section property set
	-- item: Item property set
	-- Returns: If true, it is in the focus chain
	------------------------------------------------
	IsFocusItem = function(sp, item)
		return table.find(sp.focus, item) ~= nil;
	end,
		
	---------------------------------------
	-- Traps keyboard input to the section
	-- sp: Section property set
	-- action: Action to process
	-- bPress: If true, there is a press
	---------------------------------------
	KeyTrap = function(sp, action, bPress)
		-- On tab presses, move the focus to the next item in the chain. 
		if action == "tab" and bPress then
			sp:SetFocus("+");
			
		-- On escape presses, quit.
		elseif action == "escape" and bPress then
			Quit = true;

		-- Otherwise, invoke the appropriate trap on the key.
		elseif sp.current then
			sp.focus[sp.current]:Call("onKeyTrap", action, bPress);
		end
	end,
	
	----------------------------
	-- Loads the focus chain
	-- sp: Section property set
	-- arg: Item property sets
	----------------------------
	LoadFocusChain = function(sp, ...)
		-- Install the focus chain and indicate that the first item has focus.
		sp.focus, sp.current = {}, 1;
		for _, item in ipairs(arg) do
			table.insert(sp.focus, item);
		end
		if arg[1] then
			arg[1]:Call("onFocus", true);
		end
	end,
	
	----------------------------------------
	-- Sets the current focus
	-- sp: Section property set
	-- focus: Command or focus property set
	----------------------------------------
	SetFocus = function(sp, focus)
		if not sp.current then
			return;
		end
		
		-- If a command is passed instead of a name, get the item index.
		if focus == "+" then
			focus = sp.current + 1;
			if focus > table.getn(sp.focus) then
				focus = 1;
			end
		
		-- Otherwise, find the index of the new focus.	
		else
			focus = table.find(sp.focus, focus);
		end
		
		-- If the focus has switched, indicate that the old focus is lost, set the new
		-- focus, then indicate that the new item has gained the focus.
		if focus ~= sp.current then
			sp.focus[sp.current]:Call("onFocus", false);
			sp.current = focus;
			sp.focus[focus]:Call("onFocus", true);
		end
	end,
	
	----------------------------
	-- Invokes a state switch
	-- sp: Section property set
	-- state: State to assign
	----------------------------
	Switch = function(sp, state)
		if sp.switch then
			sp.switch(sp, state);
		end
	end
}, 

-- New
-- sp: Section property set
-- load: Load routine
-- switch: Switch routine
----------------------------
function(sp, load, switch)
	sp.focus, sp.switch = {}, switch;
	sp:Switch("Load");
	load(sp);
	sp:Switch("Normal");
end);

-----------------------------------
-- Dialog
-- Launches a dialog
-- name: Section name
-- arg: Arguments to entry routine
-----------------------------------
function Dialog (name, ...)
	Launch(name, function()
		-- Add a dummy pane to the frame in order to catch stray input.
		Backdrop(true):Frame(0, 0, 1, 1);
	end, function()
		-- Destroy the dummy pane.
		Widget.Destroy(UI.GetFrameHead());	
	end, unpack(arg));
end

--------------------------
-- LoadDialog
-- Loads a dialog section
-- name: Section name
-- load: Load routine
-- enter: Entry routine
-- close: Close routine
-- switch: Switch routine
--------------------------
function LoadDialog (name, load, enter, close, switch)
	Load(name, load, enter, close, switch);
end

--------------------------
-- LoadScreen
-- Loads a screen section
-- name: Section name
-- load: Load routine
-- enter: Entry routine
-- switch: Switch routine
--------------------------
function LoadScreen (name, load, enter, switch)
	Load(name, load, enter, nil, switch);
end

------------------------
-- Section
-- Gets a section table
-- name: Section name
------------------------
function Section (name)
	return _Section[name];
end

-----------------------------------
-- Screen
-- Launches a screen
-- name: Section name
-- arg: Arguments to entry routine
-----------------------------------
function Screen (name, ...)
	Launch(name, function()
		-- Empty the stack.
		for _ = 1, table.getn(_Stack) do
			Pop();
		end
	end, function() end, unpack(arg));
end

-- Override the section variable.
BindVariable("CurrentSection", function()
	return table.top(_Stack).section;
end, function() end);